
@using frontend.Shared;
@using frontend.Config;
@page "/navigation"

@inject HttpClient httpClient


<PageTitle>Home</PageTitle>
<div class="col">
	<Badge Color="BadgeColor.Primary" IndicatorType="BadgeIndicatorType.RoundedPill">Home Page</Badge>
</div>

<Button @ref="saveButton" Color="ButtonColor.Primary" Size="ButtonSize.ExtraLarge" @onclick="() => OnSaveClick((int)SupermarketName.Lidl)">
	<Icon Name="IconName.ArrowClockwise"></Icon>
</Button>

<Toasts Class="p-3" Placement="ToastsPlacement.BottomRight" AutoHide="true" Delay="3000" />

@if (Flyers == null)
{
	<div class="text-center mt-4">
		<Spinner Color="SpinnerColor.Primary" Size="SpinnerSize.Large" />
		<p>Loading flyers...</p>
	</div>

}
else
{
	@foreach(var supermarketGroup in Flyers.Where(f => f.PageIndex == 1).GroupBy(x => x.SupermarketID))
	{
		@switch (supermarketGroup.Key)
		{
			case "1":
				<a href="https://www.lidl.hu" class="supermarket_hyperlink" title="Visit Lidl's official site">
					<img src="images/Lidl_logo.png" alt="lidl_logo.png" class="supermarket_logo"/>
				</a>
				break;
			case "2":
				<a href="https://www.spar.hu" class="supermarket_hyperlink" title="Visit Spar's official site">
					<img src="images/spar_logo.svg" alt="spar_logo.png" class="supermarket_logo"/>
				</a>
				break;
		}
		<div class="flyer_wrapper">
			<div class="row">
				@foreach (FlyerModel flyer in supermarketGroup)
				{
					<div class=" col-md-2 mb-4">
						<CardGroup>
							<Card Class="mb-4" Style="width:12rem;">
								<img src="@flyer.ImageURL" alt="placeholder" class="card-img-top" />
								<CardBody>
									<CardText>@flyer.ActualDate</CardText>
								</CardBody>
							</Card>
						</CardGroup>
					</div>
				}

			</div>
		</div>
	}

}
@code {


	List<FlyerModel> Flyers;

	private Button saveButton = default!;

	[Inject] protected ToastService ToastService { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			int supermarketCount = Enum.GetValues(typeof(SupermarketName)).Length;

			//Returns the enums data
			List<SupermarketName> id = Enum.GetValues(typeof(SupermarketName)).Cast<SupermarketName>().ToList();

			var flyerTask = id.Select(x => httpClient.GetFromJsonAsync<List<FlyerModel>>($"https://localhost:5001/api/flyers/supermarketId?supermarketId={(int)x}")).ToList();

			var res = await Task.WhenAll(flyerTask);

			Flyers = res.Where(r => r != null)
						.SelectMany(list => list!)
						.ToList();
		} catch(Exception ex)
		{
			ToastService.Notify(new(ToastType.Danger, "Sudden error occured while loading pages!")
			{
				HelpText = $"Is the API running? Error : {ex.Message}",
				IconName = IconName.ExclamationTriangleFill
			});
		}


			
	}

	private async Task OnSaveClick(int supermarketId)
	{
		saveButton.ShowLoading("Loading...");
		try
		{
			var response = await httpClient.GetAsync($"https://localhost:5001/api/flyers/supermarketId?supermarketId={supermarketId}");
			if (response.IsSuccessStatusCode)
			{
				var flyerData = await response.Content.ReadFromJsonAsync<List<FlyerModel>>();
				if (flyerData != null)
				{
					Flyers = flyerData.ToList();
					ToastService.Notify(new(ToastType.Success, $"Flyer images fetched successfully. "));
				}
				else
				{

					ToastService.Notify(new(ToastType.Warning, "Something went wrong!")
					{
						HelpText = "Contact the creator for help.",
						IconName = IconName.ExclamationTriangleFill
					});
				}

			}
			else
			{
				ToastService.Notify(new(ToastType.Danger, "Server returned an error.")
				{
					HelpText = "Try again later.",
					IconName = IconName.ExclamationTriangleFill
				});
			}
		}catch(Exception ex)
		{
			ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}")
			{
				HelpText = "Check your internet connection or contact the developer.",
				IconName = IconName.ExclamationTriangleFill
			});
		}
			saveButton.HideLoading();
			StateHasChanged();

	}


}

