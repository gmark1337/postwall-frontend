
@using frontend.Shared;
@using frontend.Config;
@page "/navigation"

@inject HttpClient _httpClient
@inject IToastService _toastService
@inject IStringLocalizer<NavigationL> Localizer

<PageTitle>@Localizer["Home"]</PageTitle>

<div class="position-relative">
	<Card class="position-absolute top-0" Style="right: -250px;">
		<CardHeader>
			@Localizer["Information"]
		</CardHeader>
		<CardBody>
		<CardText>@Localizer["InformationMessage"]</CardText>
			<Button class="col-3 mx-auto mt-2"@ref="saveButton" Color="ButtonColor.Primary" Size="ButtonSize.ExtraLarge" @onclick="OnSaveClick">
			<Icon Name="IconName.ArrowClockwise"></Icon>
		</Button>
		</CardBody>
	</Card>
</div>



@if (Flyers == null)
{
	<div class="text-center mt-4">
		<Spinner Color="SpinnerColor.Primary" Size="SpinnerSize.Large" />
		<p>@Localizer["Loading"]</p>
	</div>

}
else
{
	<div>
		<h1>@Localizer["AttractionMessage"]</h1>
	</div>
	@foreach(var supermarketGroup in Flyers.Where(f => f.PageIndex == 1).GroupBy(x => x.SupermarketID))
	{
		
		@switch (supermarketGroup.Key)
		{
			case "1":
				<a href="https://www.lidl.hu" class="supermarket_hyperlink" id="lidl-section" title="Visit Lidl's official site">
					<img src="images/Lidl_logo.png" alt="lidl_logo.png" class="supermarket_logo"/>
				</a>
				break;
			case "2":
				<a href="https://www.spar.hu" class="supermarket_hyperlink" id ="spar-section" title="Visit Spar's official site">
					<img src="images/spar_logo.svg" alt="spar_logo.png" class="supermarket_logo"/>
				</a>
				break;
		}

		int limit = supermarketGroup.Key switch
		{
			"1" => 2,
			"2" => 1,
			_ => 2
		};


		<div class="flyer_wrapper">
			
			<div class="row">
				
				@foreach (FlyerModel flyer in supermarketGroup.Take(limit))
				{
					<div class=" col-md-3 mb-4">
						<CardGroup>
							<Card Class="mb-4" Style="width:12rem;">
								<a href="/flyer/@flyer.ActualDate"><img src="@flyer.ImageURL" alt="placeholder" class="card-img-top" /></a>
								<CardBody>
									<CardText>@flyer.ActualDate</CardText>
								</CardBody>
							</Card>
						</CardGroup>
					</div>
				}
				
			</div>
			
		</div>
	}
	@foreach(var supermarketGroup in FlyerPdfs.Where(x => x.SupermarketID != null).GroupBy(x => x.SupermarketID))
	{
		<h1>@Localizer["PennyMessage"]</h1>
		@switch (supermarketGroup.Key)
		{
			case "3":
				<a href="https://www.penny.hu" class="supermarket_hyperlink" id="penny-section" title="Visit Penny's official site">
					<img src="images/Penny-Logo.svg.png" alt="Penny-logo.svg" class="supermarket_logo" />
				</a>
				break;
		}
		
		<div class="flyer_wrapper">
			<div class="row">
				@foreach(FlyerPdfModel flyer in supermarketGroup)
				{
					<div class=" col-md-3 mb-4">
						<CardGroup>
							<Card Class="mb-4" Style="width:12rem;">
								<a href="@flyer.FlyerPdfURL" class="supermarket_hpyerlink">
									<img src="@flyer.FirstPageURL" alt="This supermarket's first page" />
								</a>
								<CardBody>
									<CardText>@flyer.ActualDate</CardText>
								</CardBody>
							</Card>
						</CardGroup>
					</div>
				}
			</div>
		</div>
		
	}
}

@code {


	List<FlyerModel> Flyers;


	List<FlyerPdfModel> FlyerPdfs;

	private Button saveButton = default!;


	protected override async Task OnInitializedAsync()
	{
		try
		{

			//Returns the enums data
			List<SupermarketName> id = Enum.GetValues(typeof(SupermarketName)).Cast<SupermarketName>().ToList();

			var flyerTask = id.Select(x => _httpClient.GetFromJsonAsync<List<FlyerModel>>($"https://localhost:5001/api/flyers/supermarketId?supermarketId={(int)x}")).ToList();

			var res = await Task.WhenAll(flyerTask);

			Flyers = res.Where(r => r != null)
						.SelectMany(list => list!)
						.OrderByDescending(x => DateHelper.ExtractDateFromFlyer(x))
						.ToList();

			List<SupermarketPdfName> pdfID = Enum.GetValues(typeof(SupermarketPdfName)).Cast<SupermarketPdfName>().ToList();

			var flyerPdfTask = pdfID.Select(x => _httpClient.GetFromJsonAsync<List<FlyerPdfModel>>($"https://localhost:5001/api/pdfFlyer/supermarketId?supermarketId={(int)x}")).ToList();

			var pdfRes = await Task.WhenAll(flyerPdfTask);

			FlyerPdfs = pdfRes.Where(r => r != null)
									.SelectMany(list => list!)
									.ToList();
		} catch(Exception ex)
		{
			_toastService.ShowError($"Sudden error occured while loading pages! \n {ex.Message}");
		}



	}

	private async Task OnSaveClick()
	{
		saveButton.ShowLoading(Localizer["LoadingMessage"]);
		try
		{
			List<SupermarketName> ids = Enum.GetValues(typeof(SupermarketName)).Cast<SupermarketName>().ToList();
			var postTask = ids.Select(async supermarket =>
			{
				try
				{
					var response = await _httpClient.PostAsync($"https://localhost:5001/api/flyers/import?supermarketId={(int)supermarket}", null);

					if (response is { StatusCode: System.Net.HttpStatusCode.Conflict }){
						_toastService.ShowInfo(Localizer["SupermarketIsUpToDateInfo", supermarket]);
					}else if (!response.IsSuccessStatusCode){
						_toastService.ShowWarning(Localizer["SupermarketFailedToUpdateWarning", supermarket, response.StatusCode]);
					}
				}catch (Exception ex)
				{
					_toastService.ShowError(Localizer["SupermarketErrorUpdatingMessage", supermarket, ex.Message]);
				}
			});
			await Task.WhenAll(postTask);

			var getTask = ids.Select(async x =>
			{
				try
				{
					return await _httpClient.GetFromJsonAsync<List<FlyerModel>>($"https://localhost:5001/api/flyers/supermarketId?supermarketId={(int)x}");
				}catch
				{
					return null;
				}
			}).ToList();

			var responses = await Task.WhenAll(getTask);

			Flyers = responses.Where(r => r != null)
			.SelectMany(list => list!)
			.OrderByDescending(x => DateHelper.ExtractDateFromFlyer(x))
			.ToList();

			//PDF BLOCK 
			List<SupermarketPdfName> pdfID = Enum.GetValues(typeof(SupermarketPdfName)).Cast<SupermarketPdfName>().ToList();
			var pdfPostTask = pdfID.Select(async supermarket =>
			{
				try
				{
					var response = await _httpClient.PostAsync($"https://localhost:5001/api/pdfFlyer/import?supermarketId={(int)supermarket}", null);
					if (response is { StatusCode: System.Net.HttpStatusCode.Conflict })
						_toastService.ShowInfo(Localizer["SupermarketIsUpToDateInfo", supermarket]);
					else if (!response.IsSuccessStatusCode)
					{
						_toastService.ShowWarning(Localizer["SupermarketFailedToUpdateWarning", supermarket, response.StatusCode]);
					}
				}
				catch (Exception ex)
				{
					_toastService.ShowError(Localizer["SupermarketErrorUpdatingMessage", supermarket, ex.Message]);
				}
			});
			await Task.WhenAll(pdfPostTask);

			var getPdfTask = pdfID.Select(async x =>
			{
				try
				{
					return await _httpClient.GetFromJsonAsync<List<FlyerPdfModel>>($"https://localhost:5001/api/pdfFlyer/supermarketId?supermarketId={(int)x}");
				}
				catch{
					return null;
				}
			});
			var pdfResponses = await Task.WhenAll(getPdfTask);

			FlyerPdfs = pdfResponses.Where(r => r != null)
			.SelectMany(list => list!)
			.ToList();
		}catch(Exception ex)
		{
			_toastService.ShowError(Localizer["InternetConnectionErrorMessage", ex.Message]);
		}
		saveButton.HideLoading();
		StateHasChanged();

	}
	

}

